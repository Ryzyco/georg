; -*- mode: clojure; -*-
; vim: filetype=clojure

(logging/init {:file "riemann.log"})

; Listen on the local interface over TCP (5555), UDP (5555), and websockets(5556)
(let [host "127.0.0.1"]
  (tcp-server {:host host})
  (udp-server {:host host})
  (ws-server  {:host host}))


(defn handle-uncaught-exception [event] (
    ;add call to pagerduty
    ))

(defn handle-latency-recording [event]
   (let [timewindow-seconds 3600
         latency-failure-threshold 5000
         failure-percentage-trigger 0.05
         failure-percentage-resolve 0.005]
        
      (fixed-time-window timewindow-seconds
        (smap (fn [events]
          (let [percentage (/ (count (filter (fn [event] (or (> (:metric event) latency-failure-threshold) (= (:state event) "failure"))) events))
                              (count events))
                newService (str "Bad latency percentage of " (:service (first events)))]
               
             {:service newService
              :metric percentage
              :state (condp < percentage
                        failure-percentage-trigger "critical"
                        failure-percentage-resolve "warning"
                                                   "ok")}))
             prn
             (changed-state
               (where (state "ok") (;resolve pagerduty
					))
               (where (state "critical") (;alert pagerduty
						)))))))

           


; Expire old events from the index every 5 seconds.
(periodically-expire 5)

(let [index (index)]
  ; Inbound events will be passed to these streams:
  (streams
    (tagged "georg"
      #(info "received event" %)
      (tagged "uncaught-exception" #(handle-uncaught-exception %))
      (tagged "latency"            #(handle-latency-recording %))
      )))
